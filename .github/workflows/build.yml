name: Unzip, Build & Sign APK (root or myapp/)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Find a ZIP at repo root (first *.zip) ----
      - name: Find ZIP (root)
        id: findzip
        shell: bash
        run: |
          set -e
          zipfile=""
          # prefer a single zip at repo root
          if ls -1 *.zip >/dev/null 2>&1; then
            zipfile="$(ls -1 *.zip | head -n 1)"
          fi
          echo "zip=$zipfile" >> "$GITHUB_OUTPUT"
          if [ -n "$zipfile" ]; then
            echo "Found ZIP: $zipfile"
          else
            echo "No ZIP at repo root. Continuing with existing tree."
          fi

      # ---- Unzip into repo, but SKIP .github from the ZIP ----
      - name: Unzip if ZIP present
        if: ${{ steps.findzip.outputs.zip != '' }}
        shell: bash
        run: |
          set -e
          rm -rf srcdir
          mkdir -p srcdir
          unzip -q "${{ steps.findzip.outputs.zip }}" -d srcdir

          cd srcdir
          root="."
          # if the zip contains a single top-level folder, descend into it
          if [ "$(ls -1 | wc -l)" -eq 1 ] && [ -d "$(ls -1)" ]; then
            root="$(ls -1)"
          fi

          shopt -s dotglob
          for f in "$root"/*; do
            base="$(basename "$f")"
            if [ "$base" = ".github" ]; then
              echo "Skipping .github from ZIP to avoid overwriting workflow."
              continue
            fi
            mv "$f" ..
          done
          cd ..
          rm -rf srcdir

      # ---- Locate Gradle root (repo root or myapp/) ----
      - name: Locate Gradle root
        id: gradleroot
        shell: bash
        run: |
          set -e
          dir=""
          if [ -f settings.gradle ] || [ -f settings.gradle.kts ]; then
            dir="."
          elif [ -d myapp ] && ( [ -f myapp/settings.gradle ] || [ -f myapp/settings.gradle.kts ] ); then
            dir="myapp"
          else
            echo "Could not find settings.gradle anywhere in the repo."
            echo "Make sure your Android project is at repo root or under myapp/."
            exit 1
          fi
          echo "dir=$dir" >> "$GITHUB_OUTPUT"
          echo "Gradle root: $dir"

      # ---- JDK 17 (toolchain) ----
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # ---- Gradle wrapper cache & setup ----
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        shell: bash
        working-directory: ${{ steps.gradleroot.outputs.dir }}
        run: chmod +x ./gradlew || true

      # ---- (Optional) Inject signing from secrets if keystore was provided ----
      - name: Inject signing config
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        shell: bash
        working-directory: ${{ steps.gradleroot.outputs.dir }}
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          KS_PASS:               ${{ secrets.KS_PASS }}
          KEY_ALIAS:             ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD:          ${{ secrets.KEY_PASSWORD }}
        run: |
          set -e
          echo "Preparing keystore & gradle.properties from secretsâ€¦"
          mkdir -p app/keystore
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > app/keystore/release.keystore

          cat >> gradle.properties <<'EOF'
          RELEASE_STORE_FILE=app/keystore/release.keystore
          RELEASE_STORE_PASSWORD=${KS_PASS}
          RELEASE_KEY_ALIAS=${KEY_ALIAS}
          RELEASE_KEY_PASSWORD=${KEY_PASSWORD}
          kotlin.compiler.jvm.target=11
          EOF

      # ---- Build release APK ----
      - name: Build Release APK
        shell: bash
        working-directory: ${{ steps.gradleroot.outputs.dir }}
        run: |
          ./gradlew assembleRelease --no-daemon --stacktrace

      # ---- Upload artifact ----
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: |
            ${{ steps.gradleroot.outputs.dir }}/app/build/outputs/apk/release/*.apk
