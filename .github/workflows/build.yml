name: Unzip, Build & Sign APK (ZIP at repo root)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      id-token: write

    env:
      # Try both secret name sets so you don't need to rename them.
      SIGNING_KEY_BASE64: ${{ secrets.SIGNING_KEY_BASE64 || secrets.ANDROID_SIGNING_KEY_BASE64 || secrets.SIGNING_KEY || '' }}
      KEY_ALIAS:           ${{ secrets.KEY_ALIAS || secrets.ANDROID_KEY_ALIAS || '' }}
      KEY_STORE_PASSWORD:  ${{ secrets.KEY_STORE_PASSWORD || secrets.ANDROID_KEYSTORE_PASSWORD || secrets.KS_PASS || '' }}
      KEY_PASSWORD:        ${{ secrets.KEY_PASSWORD || secrets.ANDROID_KEY_PASSWORD || secrets.KP_PASS || '' }}

    steps:
      - name: Checkout
      # Full clone in case the ZIP is large / needs LFS
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle (8.7)
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.7

      - name: Find ZIP (root or myapp/)
        id: findzip
        run: |
          set -e
          # look in repo root then in myapp/ (some users put the zip there)
          Z="$(ls -1 *.zip 2>/dev/null | head -n1 || true)"
          if [ -z "$Z" ] && [ -d myapp ]; then
            cd myapp
            Z="$(ls -1 *.zip 2>/dev/null | head -n1 || true)"
            if [ -n "$Z" ]; then echo "zip_dir=myapp" >> "$GITHUB_OUTPUT"; fi
          fi
          echo "zip_file=${Z:-}" >> "$GITHUB_OUTPUT"
          echo "ZIP found: ${Z:-<none>}"

      - name: Unzip project if ZIP is present
        if: steps.findzip.outputs.zip_file != ''
        id: unzip
        run: |
          set -e
          workdir="."
          [ -n "${{ steps.findzip.outputs.zip_dir }}" ] && workdir="${{ steps.findzip.outputs.zip_dir }}"
          mkdir -p srcdir
          unzip -o "${workdir}/${{ steps.findzip.outputs.zip_file }}" -d srcdir
          echo "unzipped_dir=srcdir" >> "$GITHUB_OUTPUT"
          echo "Contents of srcdir:"
          find srcdir -maxdepth 2 -type f | sed -e 's/^/  /'

      - name: Locate Gradle root
        id: findproj
        run: |
          set -e
          # 1) root?
          if ls -1 settings.gradle settings.gradle.kts >/dev/null 2>&1 ; then
            echo "proj_dir=." >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 2) if we unzipped, try to locate settings.gradle within 2 levels
          if [ -d srcdir ]; then
            SG="$(find srcdir -maxdepth 2 -type f \( -name 'settings.gradle' -o -name 'settings.gradle.kts' \) | head -n1 || true)"
            if [ -n "$SG" ]; then
              DIR="$(dirname "$SG")"
              echo "proj_dir=$DIR" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          echo "Could not find settings.gradle anywhere in the repo."
          echo "Make sure your Android project is at repo root or inside the ZIP."
          exit 1

      - name: Ensure Gradle wrapper exists
        working-directory: ${{ steps.findproj.outputs.proj_dir }}
        run: |
          set -e
          if [ ! -f ./gradlew ]; then
            echo "No gradlew found; generating wrapper with Gradle 8.7"
            gradle wrapper --gradle-version 8.7
            chmod +x ./gradlew
          else
            chmod +x ./gradlew
          fi

      - name: Build Release APK
        working-directory: ${{ steps.findproj.outputs.proj_dir }}
        run: |
          set -e
          ./gradlew --no-daemon clean assembleRelease
          echo "APK outputs:"
          find app/build/outputs -type f -name "*.apk" -printf "  %p\n" || true

      # If your module name is not "app", adjust releaseDirectory accordingly.
      - name: Sign APK
        if: env.SIGNING_KEY_BASE64 != '' && env.KEY_ALIAS != '' && env.KEY_STORE_PASSWORD != '' && env.KEY_PASSWORD != ''
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: ${{ steps.findproj.outputs.proj_dir }}/app/build/outputs/apk/release
          signingKeyBase64: ${{ env.SIGNING_KEY_BASE64 }}
          alias: ${{ env.KEY_ALIAS }}
          keyStorePassword: ${{ env.KEY_STORE_PASSWORD }}
          keyPassword: ${{ env.KEY_PASSWORD }}

      - name: Upload APK artifact (signed if present, else unsigned)
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: |
            ${{ steps.findproj.outputs.proj_dir }}/app/build/outputs/apk/release/*.apk
          if-no-files-found: error
