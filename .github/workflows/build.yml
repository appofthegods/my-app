name: Build & Sign APK (ZIP or committed project)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Optional: if a ZIP is committed, unzip it first
      - name: Find ZIP (root or myapp/)
        id: findzip
        shell: bash
        run: |
          set -e
          cand=""
          for p in *.zip myapp/*.zip; do
            [ -e "$p" ] || continue
            case "$p" in
              *GitHubReady*.zip) cand="$p"; break ;;
              *) [ -z "$cand" ] && cand="$p" ;;
            esac
          done
          echo "zip=$cand" >> "$GITHUB_OUTPUT"
          if [ -n "$cand" ]; then echo "Found ZIP: $cand"; else echo "No ZIP found; building committed sources."; fi

      - name: Unzip project if ZIP is present
        if: ${{ steps.findzip.outputs.zip != '' }}
        shell: bash
        run: |
          set -e
          rm -rf srcdir
          mkdir -p srcdir
          unzip -q "${{ steps.findzip.outputs.zip }}" -d srcdir
          cd srcdir
          root="."
          if [ "$(ls -1 | wc -l)" -eq 1 ] && [ -d "$(ls -1)" ]; then
            root="$(ls -1)"
          fi
          shopt -s dotglob
          mv "$root"/* ..
          cd ..
          rm -rf srcdir

      - name: Locate Gradle root
        id: gradleroot
        shell: bash
        run: |
          set -e
          if [ -f settings.gradle ] || [ -f settings.gradle.kts ]; then
            echo "dir=." >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [ -f myapp/settings.gradle ] || [ -f myapp/settings.gradle.kts ]; then
            echo "dir=myapp" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "Could not find settings.gradle; ensure Android project is at repo root or myapp/."
          exit 1

      - name: Set up JDK 17 (locked)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'gradle'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Ensure Gradle wrapper executable
        working-directory: ${{ steps.gradleroot.outputs.dir }}
        shell: bash
        run: |
          if [ -f ./gradlew ]; then chmod +x ./gradlew; fi

      # If ALL four secrets exist, create keystore and gradle.properties for release signing.
      # Secrets (exact names):
      #   ANDROID_KEYSTORE_BASE64, ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_PASSWORD
      - name: Inject signing keystore & properties (optional)
        id: signcfg
        working-directory: ${{ steps.gradleroot.outputs.dir }}
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -e
          if [ -n "$ANDROID_KEYSTORE_BASE64" ] && [ -n "$ANDROID_KEYSTORE_PASSWORD" ] && [ -n "$ANDROID_KEY_ALIAS" ] && [ -n "$ANDROID_KEY_PASSWORD" ]; then
            echo "Signing secrets present — creating keystore and gradle.properties"
            mkdir -p app/keystore
            echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > app/keystore/release.keystore
            touch gradle.properties
            sed -i '/^RELEASE_STORE_FILE=/d' gradle.properties || true
            sed -i '/^RELEASE_STORE_PASSWORD=/d' gradle.properties || true
            sed -i '/^RELEASE_KEY_ALIAS=/d' gradle.properties || true
            sed -i '/^RELEASE_KEY_PASSWORD=/d' gradle.properties || true
            cat >> gradle.properties <<EOF
RELEASE_STORE_FILE=app/keystore/release.keystore
RELEASE_STORE_PASSWORD=${ANDROID_KEYSTORE_PASSWORD}
RELEASE_KEY_ALIAS=${ANDROID_KEY_ALIAS}
RELEASE_KEY_PASSWORD=${ANDROID_KEY_PASSWORD}
EOF
            echo "has_signing=true" >> "$GITHUB_OUTPUT"
          else
            echo "Signing secrets missing — building unsigned (or debug-signed) release."
            echo "has_signing=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Release APK
        working-directory: ${{ steps.gradleroot.outputs.dir }}
        shell: bash
        run: |
          set -e
          if [ -f ./gradlew ]; then
            ./gradlew --no-daemon clean :app:assembleRelease --stacktrace
          else
            gradle --no-daemon clean :app:assembleRelease --stacktrace
          fi
          echo "APKs found:"
          find app/build/outputs -type f -name "*.apk" -print || true

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          if-no-files-found: error
          path: |
            ${{ steps.gradleroot.outputs.dir }}/app/build/outputs/apk/release/*.apk
            ${{ steps.gradleroot.outputs.dir }}/app/build/outputs/**/mapping.txt
