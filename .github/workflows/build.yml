name: Unzip, Build & Sign APK (root or myapp/)
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find ZIP (root or myapp/)
        id: findzip
        run: |
          set -e
          ZIPS=($(ls -1 *.zip 2>/dev/null || true))
          if [ ${#ZIPS[@]} -gt 0 ]; then
            echo "zip=${ZIPS[0]}" >> $GITHUB_OUTPUT
            exit 0
          fi
          if [ -f myapp/*.zip ]; then
            echo "zip=$(ls -1 myapp/*.zip | head -n1)" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "zip=" >> $GITHUB_OUTPUT

      - name: Unzip project if ZIP is present
        if: ${{ steps.findzip.outputs.zip != '' }}
        run: |
          set -e
          mkdir -p srcdir
          unzip -q "${{ steps.findzip.outputs.zip }}" -d srcdir
          echo "Unzipped into ./srcdir"
          ls -R srcdir | sed 's/^/  /'

      - name: Locate Gradle root
        id: locate
        run: |
          set -e
          ROOTS=("srcdir" ".")
          for R in "${ROOTS[@]}"; do
            if [ -f "$R/settings.gradle" ] || [ -f "$R/settings.gradle.kts" ]; then
              echo "found_root=$R" >> $GITHUB_OUTPUT
              exit 0
            fi
            if [ -d "$R/app" ] && { [ -f "$R/app/settings.gradle" ] || [ -f "$R/app/settings.gradle.kts" ]; }; then
              echo "found_root=$R/app" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          echo "Could not find settings.gradle anywhere in the repo." >&2
          exit 1

      - name: Set up JDK 17 (locked)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false

      - name: Inject keystore if secrets are present
        working-directory: ${{ steps.locate.outputs.found_root }}
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -e
          if [ -z "$ANDROID_KEYSTORE_BASE64" ] || [ -z "$ANDROID_KEYSTORE_PASSWORD" ] || [ -z "$ANDROID_KEY_ALIAS" ] || [ -z "$ANDROID_KEY_PASSWORD" ]; then
            echo "No signing secrets found; building unsigned release." 
            exit 0
          fi

          mkdir -p app/keystore
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > app/keystore/release.keystore

          # Ensure gradle.properties exists and holds signing vars
          touch gradle.properties
          grep -q '^RELEASE_STORE_FILE=' gradle.properties || cat >> gradle.properties <<'EOF'
RELEASE_STORE_FILE=app/keystore/release.keystore
RELEASE_STORE_PASSWORD=
RELEASE_KEY_ALIAS=
RELEASE_KEY_PASSWORD=
EOF
          # Fill values (keeping the keys present)
          sed -i "s|^RELEASE_STORE_PASSWORD=.*|RELEASE_STORE_PASSWORD=${ANDROID_KEYSTORE_PASSWORD}|" gradle.properties
          sed -i "s|^RELEASE_KEY_ALIAS=.*|RELEASE_KEY_ALIAS=${ANDROID_KEY_ALIAS}|" gradle.properties
          sed -i "s|^RELEASE_KEY_PASSWORD=.*|RELEASE_KEY_PASSWORD=${ANDROID_KEY_PASSWORD}|" gradle.properties

      - name: Build Release APK
        working-directory: ${{ steps.locate.outputs.found_root }}
        run: |
          set -e
          ./gradlew --no-daemon clean :app:assembleRelease

      - name: Upload APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: |
            ${{ steps.locate.outputs.found_root }}/app/build/outputs/apk/release/*.apk
            ${{ steps.locate.outputs.found_root }}/app/build/outputs/**/mapping.txt
