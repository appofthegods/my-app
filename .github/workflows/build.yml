name: Unzip, Build & Sign APK (root or myapp/)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Find a ZIP at repo root (first *.zip) ----
      - name: Find ZIP (root)
        id: findzip
        shell: bash
        run: |
          set -e
          zipfile=""
          # prefer a single zip at repo root
          if ls -1 *.zip >/dev/null 2>&1; then
            zipfile="$(ls -1 *.zip | head -n 1)"
          fi
          echo "zipfile=$zipfile" >> "$GITHUB_OUTPUT"

      # ---- Unzip project if ZIP is present (to ./srcdir) ----
      - name: Unzip project if ZIP is present
        if: ${{ steps.findzip.outputs.zipfile != '' }}
        id: unzip
        shell: bash
        run: |
          set -e
          rm -rf srcdir
          mkdir -p srcdir
          unzip -q "${{ steps.findzip.outputs.zipfile }}" -d srcdir
          echo "unzipped=1" >> "$GITHUB_OUTPUT"

      # ---- Locate settings.gradle â†’ gradle root (prefer repo root, then myapp/, else inside srcdir) ----
      - name: Locate Gradle root
        id: gradleroot
        shell: bash
        run: |
          set -e
          dir=""
          if [ -f settings.gradle ] || [ -f settings.gradle.kts ]; then
            dir="."
          elif [ -f myapp/settings.gradle ] || [ -f myapp/settings.gradle.kts ]; then
            dir="myapp"
          else
            # search only inside srcdir if we unzipped
            if [ -d srcdir ]; then
              match="$(find srcdir -maxdepth 4 -type f \( -name settings.gradle -o -name settings.gradle.kts \) | head -n 1)"
              if [ -n "$match" ]; then
                dir="$(dirname "$match")"
              fi
            fi
          fi
          if [ -z "$dir" ]; then
            echo "Could not find settings.gradle anywhere in the repo."
            echo "Make sure your Android project is at repo root, under myapp/, or inside the uploaded zip."
            exit 1
          fi
          echo "dir=$dir" >> "$GITHUB_OUTPUT"
          echo "Gradle root: $dir"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable (if present)
        shell: bash
        working-directory: ${{ steps.gradleroot.outputs.dir }}
        run: |
          if [ -f ./gradlew ]; then chmod +x ./gradlew; fi

      # ---- Recreate keystore & inject signing + Kotlin JVM target ----
      - name: Inject signing config
        shell: bash
        working-directory: ${{ steps.gradleroot.outputs.dir }}
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          KS_PASS: ${{ secrets.KS_PASS }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          set -e
          # Always ensure gradle.properties exists and set JVM target = 11
          touch gradle.properties
          if ! grep -q '^kotlin.compiler.jvm.target=' gradle.properties; then
            echo 'kotlin.compiler.jvm.target=11' >> gradle.properties
          else
            sed -i 's/^kotlin\.compiler\.jvm\.target=.*/kotlin.compiler.jvm.target=11/' gradle.properties
          fi

          if [ -n "$ANDROID_KEYSTORE_BASE64" ]; then
            mkdir -p app/keystore
            echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > app/keystore/release.keystore

            # Append/override signing props
            {
              echo "RELEASE_STORE_FILE=app/keystore/release.keystore"
              echo "RELEASE_STORE_PASSWORD=$KS_PASS"
              echo "RELEASE_KEY_ALIAS=$KEY_ALIAS"
              echo "RELEASE_KEY_PASSWORD=$KEY_PASSWORD"
            } >> gradle.properties
          fi

      - name: Build Release APK
        shell: bash
        working-directory: ${{ steps.gradleroot.outputs.dir }}
        run: |
          if [ -f ./gradlew ]; then
            ./gradlew clean assembleRelease --no-daemon --stacktrace
          else
            # No wrapper? use gradle command provided by setup-gradle
            gradle clean assembleRelease --no-daemon --stacktrace
          fi

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: ${{ steps.gradleroot.outputs.dir }}/app/build/outputs/apk/release/*.apk
