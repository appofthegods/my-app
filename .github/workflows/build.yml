name: Unzip, Build & Sign APK (root or myapp/)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ZIP_GLOB: "*.zip"                        # first .zip at repo root (or myapp/)
      WORKDIR: srcdir
      PROJECT_DIR: ""                          # detected automatically
      SIGNING_KEY_B64: ${{ secrets.SIGNING_KEY }}
      KEY_ALIAS:       ${{ secrets.KEY_ALIAS }}
      KEYSTORE_PASS:   ${{ secrets.KS_PASS }}
      KEY_PASS:        ${{ secrets.KS_PASS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Find ZIP (root or myapp/)
        id: findzip
        run: |
          set -e
          ROOT_ZIP=$(ls -1 $ZIP_GLOB 2>/dev/null | head -n 1 || true)
          if [ -z "$ROOT_ZIP" ] && [ -d myapp ]; then
            ROOT_ZIP=$(ls -1 myapp/$ZIP_GLOB 2>/dev/null | head -n 1 || true)
          fi
          echo "zip=$ROOT_ZIP" >> $GITHUB_OUTPUT
          if [ -n "$ROOT_ZIP" ]; then
            echo "Found ZIP: $ROOT_ZIP"
          else
            echo "No ZIP found (ok if project files are already checked in)."
          fi

      - name: Unzip project if ZIP is present
        if: steps.findzip.outputs.zip != ''
        run: |
          set -e
          rm -rf "$WORKDIR"
          mkdir -p "$WORKDIR"
          unzip -q "${{ steps.findzip.outputs.zip }}" -d "$WORKDIR"
          # descend if only one top-level folder
          TOP=$(ls -1 "$WORKDIR" | head -n 1 || true)
          if [ -n "$TOP" ] && [ -d "$WORKDIR/$TOP" ] && [ "$(ls -1 "$WORKDIR" | wc -l)" = "1" ]; then
            mv "$WORKDIR/$TOP" "$WORKDIR/tmpmove"
            rm -rf "$WORKDIR"
            mv "$WORKDIR/tmpmove" "$WORKDIR"
          fi
          echo "Unzipped into $WORKDIR"
          ls -la "$WORKDIR"

      - name: Locate Gradle root
        run: |
          set -e
          CANDIDATES=()
          [ -d "$WORKDIR" ] && CANDIDATES+=("$WORKDIR")
          [ -d "myapp" ] && CANDIDATES+=("myapp")
          CANDIDATES+=(".")
          FOUND=""
          for d in "${CANDIDATES[@]}"; do
            if [ -f "$d/settings.gradle" ] || [ -f "$d/settings.gradle.kts" ]; then
              FOUND="$d"; break
            fi
          done
          if [ -z "$FOUND" ]; then
            echo "Could not find settings.gradle anywhere (repo root or myapp/)."
            exit 1
          fi
          echo "PROJECT_DIR=$FOUND" >> $GITHUB_ENV
          echo "Gradle project dir: $FOUND"

      - name: Set up Gradle (use wrapper if present)
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper

      - name: Build Release APK
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -e
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            ./gradlew --no-daemon clean :app:assembleRelease
          else
            gradle --no-daemon clean :app:assembleRelease
          fi

      - name: Decode Keystore (if provided)
        if: env.SIGNING_KEY_B64 != ''
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "$SIGNING_KEY_B64" | base64 -d > release.keystore
          ls -la release.keystore

      - name: Sign APK (if keystore present)
        if: env.SIGNING_KEY_B64 != ''
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -e
          APK=$(ls -1 app/build/outputs/apk/release/*.apk | head -n 1)
          if [ -z "$APK" ]; then
            echo "No APK found to sign"; exit 1
          fi
          jarsigner -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore release.keystore -storepass "$KEYSTORE_PASS" -keypass "$KEY_PASS" \
            "$APK" "$KEY_ALIAS"
          echo "Signed: $APK"

      - name: Upload APK
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: ${{ env.PROJECT_DIR }}/app/build/outputs/apk/release/*.apk
          if-no-files-found: warn
